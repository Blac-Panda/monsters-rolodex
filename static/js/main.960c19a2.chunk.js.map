{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","monsters","map","user","i","card_card","key","SearchBox","placeholder","handleChange","type","onChange","ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","children","Component","App","onRequestRobots","_this$props","searchField","onSearchChange","robots","isPending","filteredMonsters","filter","monster","toLowerCase","includes","search_box_SearchBox","components_ErrorBoundary","card_list_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.960c19a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.css'\r\n\r\nconst Card = ({name, email, id}) => (\r\n    <div className=\"card-container\">\r\n        <img \r\n        alt=\"monster\" \r\n        src={`https://robohash.org/${id}?size=180x180`} \r\n        />\r\n        <p> {name} </p>\r\n        <p> {email} </p>\r\n    </div>\r\n);\r\n\r\nexport default Card;","import React from 'react'\r\nimport './card-list.css'\r\nimport Card from '../card/card'\r\n\r\nexport const CardList = ({monsters}) => (\r\n        <div className='card-list'>\r\n            {\r\n            monsters.map((user, i) => {\r\n              return (\r\n                <Card\r\n                  key={i}\r\n                  id={monsters[i].id}\r\n                  name={monsters[i].name}\r\n                  email={monsters[i].email}\r\n                  />\r\n              );\r\n            })\r\n          }\r\n        </div>\r\n);","import React from 'react'\r\nimport './search-box.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input type='search' \r\n        className='search'\r\n        placeholder= {placeholder} \r\n        onChange={handleChange}\r\n          />\r\n);","import React, {Component} from 'react'\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError){\r\n            return <h1>Oooops. Error occured</h1>\r\n        }\r\n        return this.props.children\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React, {Component} from 'react'\nimport './App.css';\nimport { connect } from 'react-redux'\nimport {CardList} from '../components/card-list/card-list'\nimport {SearchBox} from '../components/search-box/search-box'\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport {setSearchField, requestRobots} from '../actions'\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  } \n\n  render(){\n    const {searchField, onSearchChange, robots, isPending}= this.props;\n    const filteredMonsters = robots.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      ) \n    return isPending? \n    <h1>Loading:</h1> :\n    (\n      <div className='App'>\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n        placeholder='search monsters'\n        handleChange = {onSearchChange}\n        />\n        <ErrorBoundary>\n        <CardList monsters={filteredMonsters}/> \n        </ErrorBoundary>\n        \n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\r\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n    switch(action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return {...state, searchField: action.payload};\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch (action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state, isPending: true}\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return {...state, robots: action.payload, isPending: false}\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state, error: action.payload, isPending: false}\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware, combineReducers} from 'redux'\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers'\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = \n    createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n<Provider store={store}><App/></Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}